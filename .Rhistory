dotproduct = 0
#iterate through each column
for(n in ncol(A)){
dotproduct = dotproduct + A[m,n]*x[n]
}
output[m] = dotproduct
}
output
A = rbind(c(2,3,-4), c(11,8,7), c(2,5,3))
x = c(3,7,5)
output = c()
#for each row
for(m in nrow(A)){
#dotproduct = 0
#iterate through each column
for(n in ncol(A)){
#dotproduct = dotproduct + A[m,n]*x[n]
print(A[m,n])
}
#output[m] = dotproduct
}
#output
A = rbind(c(2,3,-4), c(11,8,7), c(2,5,3))
x = c(3,7,5)
output = c()
#for each row
for(m in nrow(A)){
#dotproduct = 0
#iterate through each column
for(n in ncol(A)){
#dotproduct = dotproduct + A[m,n]*x[n]
print(A[m,n])
}
#output[m] = dotproduct
}
A = rbind(c(2,3,2), c(11,8,7), c(2,5,3))
x = c(3,7,5)
output = c()
#for each row
for(m in nrow(A)){
#dotproduct = 0
#iterate through each column
for(n in ncol(A)){
dotproduct = dotproduct + A[m,n]*x[n]
print(A[m,n])
}
output[m] = dotproduct
}
A = rbind(c(2,3,2), c(11,8,7), c(2,5,3))
x = c(3,7,5)
output = c()
#for each row
for(m in nrow(A)){
#dotproduct = 0
#iterate through each column
for(n in ncol(A)){
#dotproduct = dotproduct + A[m,n]*x[n]
print(A[m,n])
print("nrow = " + nrow(A))
print("ncol = " + ncol)
}
#output[m] = dotproduct
}
A = rbind(c(2,3,2), c(11,8,7), c(2,5,3))
x = c(3,7,5)
output = c()
#for each row
for(m in nrow(A)){
#dotproduct = 0
#iterate through each column
for(n in ncol(A)){
#dotproduct = dotproduct + A[m,n]*x[n]
print(A[m,n])
print("nrow = ", nrow(A))
print("ncol = ", ncol)
}
#output[m] = dotproduct
}
A = rbind(c(2,3,2), c(11,8,7), c(2,5,3))
x = c(3,7,5)
output = c()
print("nrow = ", nrow(A))
print("ncol = ", ncol(A))
#for each row
for(m in nrow(A)){
#dotproduct = 0
#iterate through each column
for(n in ncol(A)){
#dotproduct = dotproduct + A[m,n]*x[n]
print(A[m,n])
}
#output[m] = dotproduct
}
A = rbind(c(2,3,2), c(11,8,7), c(2,5,3))
x = c(3,7,5)
output = c()
print(nrow(A))
print(ncol(A))
#for each row
for(m in nrow(A)){
#dotproduct = 0
#iterate through each column
for(n in ncol(A)){
#dotproduct = dotproduct + A[m,n]*x[n]
print(A[m,n])
}
#output[m] = dotproduct
}
A = rbind(c(2,3), c(11,8), c(2,5))
x = c(3,7,5)
output = c()
print(nrow(A))
print(ncol(A))
#for each row
for(m in nrow(A)){
#dotproduct = 0
#iterate through each column
for(n in ncol(A)){
#dotproduct = dotproduct + A[m,n]*x[n]
print(A[m,n])
}
#output[m] = dotproduct
}
A = rbind(c(2,3,2), c(11,8,3), c(2,5,4))
x = c(3,7,5)
output = c()
#for each row
for(m in nrow(A)){
#dotproduct = 0
#iterate through each column
for(n in ncol(A)){
#dotproduct = dotproduct + A[m,n]*x[n]
print(n)
}
print(m)
#output[m] = dotproduct
}
A = rbind(c(2,3,2), c(11,8,3), c(2,5,4))
x = c(3,7,5)
output = c()
#for each row
for(m in 1:nrow(A)){
#dotproduct = 0
#iterate through each column
for(n in 1:ncol(A)){
#dotproduct = dotproduct + A[m,n]*x[n]
print(n)
}
print(m)
#output[m] = dotproduct
}
A = rbind(c(2,3,2), c(11,8,3), c(2,5,4))
x = c(3,7,5)
output = c()
#for each row
for(m in 1:nrow(A)){
dotproduct = 0
#iterate through each column
for(n in 1:ncol(A)){
dotproduct = dotproduct + A[m,n]*x[n]
}
output[m] = dotproduct
}
output
test = function(row, vector){
sum = 0
sapply(1:length(row), function(i) { sum = sum + row[i] + vector[i] })
return(sum)
}
test(A[1, ], x)
x = c(1,2,3,4,5,6,7,8,9)
mad = function(vector){
deviation = c()
for(n in 1:length(vector)){
deviation[n] = vector[n] - median(vector)
}
sapply(deviation, median)
}
mad(x)
x = c(1,2,3,4,5,6,7,8,9)
mad = function(vector){
deviation = c()
for(n in 1:length(vector)){
deviation[n] = vector[n] - median(vector)
}
return(sapply(deviation, median))
}
mad(x)
x = c(1,2,3,4,5,6,7,8,9)
mad = function(vector){
deviation = c()
for(n in 1:length(vector)){
deviation[n] = vector[n] - median(vector)
}
return(median(deviation))
}
mad(x)
x = c(1,2,3,4,5,6,7,8,9)
mad = function(vector){
deviation = c()
for(n in 1:length(vector)){
deviation[n] = abs(vector[n] - median(vector))
}
return(median(deviation))
}
mad(x)
x = c(1,2,3,4,5,6,7,8,9,55)
mad = function(vector){
deviation = c()
for(n in 1:length(vector)){
deviation[n] = abs(vector[n] - median(vector))
}
return(median(deviation))
}
mad(x)
x = c(1,2,3,4,5,6,7,8,9,55,202)
mad = function(vector){
deviation = c()
for(n in 1:length(vector)){
deviation[n] = abs(vector[n] - median(vector))
}
return(median(deviation))
}
mad(x)
sapply(vector, vector-median)
sapply(vector, 'vector-median')
sapply(vector, function(i){i-median})
sapply(vector, function(i){i-median(vector)})
x = c(1,2,3,4,5,6,7,8,9,55,202)
mad = function(vector){
deviation = c()
for(n in 1:length(vector)){
deviation[n] = abs(vector[n] - median(vector))
}
return(median(deviation))
}
mad(x)
strsplit(Names, split = ' ')
Names <- "John Andrew Thomas"
strsplit(Names, split = ' ')
people = strsplit(Names, split = ' ')[[1]]
people
paste(people, collapse = '@gmail.com', sep = ';')
paste(people, sep = ';', collapse = '@gmail.com')
paste(people, sep = ';', collapse = '@gmail.com')
paste(people, sep = '@gmail.com', collapse = ';')
paste(people, sep = '@gmail.com')
paste(people, collapse = '@gmail.com')
paste(people, sep = ';', collapse = '@gmail.com')
people = strsplit(Names, split = ' ')
paste(people, sep = ';', collapse = '@gmail.com')
email = paste0(people, collapse = '@gmail.com')
email
people = strsplit(Names, split = ' ')[[1]]
email = paste0(people, collapse = '@gmail.com')
email
paste(people, sep = ';', collapse = '@gmail.com')
people
paste(people, '@gmail.com')
paste(people, '@gmail.com', sep = ';')
paste(email, sep = ';')
paste(email, collapse = ';')
o
email = paste(people, '@gmail.com')
email
paste(email, collapse = ';')
people = strsplit(Names, split = '')[[1]]
people
people = strsplit(Names, split = ' ')[[1]]
people
email = paste(people, '@gmail.com')
email
paste(email, collapse = ';')
email = paste0(people, '@gmail.com')
email
paste(email, collapse = ';')
paste(email, collapse = '; ')
origin
origin = c(a,b,c,d,e)
origin
origin = c(a,b,c,d,e)
origin = c('a','b','c','d','e')
origin
paste0(origin, origin)
paste0(origin, 'a')
paste0(origin, 'b')
paste0(origin, 'd')
paste0(origin, 'e')
origin = c('a','b','c','d','e')
doubleA = paste0(origin, 'a')
doubleB = paste0(origin, 'b')
doubleC = paste0(origin, 'c')
doubleD = paste0(origin, 'd')
doubleE = paste0(origin, 'e')
Answer = doubleA + doubleB + doubleC + doubleD + doubleE
Answer = c()
Answer = doubleA + doubleB + doubleC + doubleD + doubleE
Answer = list(doubleA, doubleB, doubleC, doubleD, doubleE)
Answer
unlist(Answer)
compare = function(word1, word2){
ifelse(nchar(word1) == nchar(word2), "Equal Length", "Not Equal Length")
}
compare("EPS568","SummerA")
compare = function(word1, word2){
ifelse(nchar(word1) == nchar(word2), "Equal Length", "Not Equal Length")
}
compare("EPS568","Summer")
#compare("EPS568","SummerA")
one <- list.files(path = './names/names', pattern = '*.txt', full.names = FALSE)
two <- lapply(one, function(x){
read.csv(x, header = FALSE,stringsAsFactors = FALSE, col.names = c('Name', 'Sex', 'Number'))
})
head(two)
two[[1]]
head(one)
str(one)
head(two)
one <- list.files(path = './names/names', pattern = '*.txt', full.names = FALSE)
p <- p + geom_line(data = df, aes(x = Name))
p <- ggplot()
library(ggplot2)
library(tidyverse)
data(faithful)
faithful
#Q1
faithful$length <- ifelse(faithful$eruptions < 3.2, "short", "long")
head(faithful)
#Q2
g <- ggplot(faithful, aes(x = length, y = waiting))
g + geom_boxplot() + xlab('eruption duration') + ylab('waiting time')
#Q3
ggplot(faithful, aes(x = waiting)) + geom_density(aes(color = length))
library(dplyr)
library(tidyverse)
library(ggplot2)
p <- ggplot()
lapply(two, function(df){
p <- p + geom_line(data = df, aes(x = Name))
})
p <- p + geom_line(data = df, aes(x = Name, y = Sex))
p <- ggplot()
lapply(two, function(df){
p <- p + geom_line(data = df, aes(x = Name, y = Sex))
})
year <- as.int(substring(x, 3, 7))
file2 <- lapply(file1, function(x){
year <- as.numeric(substring(x, 3, 7))
read.csv(x, header = FALSE,stringsAsFactors = FALSE, col.names = c('Name', 'Sex', 'Number'))
})
file1 <- list.files(path = './names/names', pattern = '*.txt', full.names = FALSE)
file2 <- lapply(file1, function(x){
year <- as.numeric(substring(x, 3, 7))
read.csv(x, header = FALSE,stringsAsFactors = FALSE, col.names = c('Name', 'Sex', 'Number'))
})
file2$year <-
head(file2)
head(file2)
file1 <- list.files(path = './names/names', pattern = '*.txt', full.names = FALSE)
file2 <- lapply(file1, function(x){
year <- as.numeric(substr(x, 3, 6))
read.csv(x, header = FALSE,stringsAsFactors = FALSE, col.names = c('Name', 'Sex', 'Number'))
})
file1 <- list.files(path = './names/names', pattern = '*.txt', full.names = FALSE)
file2 <- lapply(file1, function(x){
year <- as.numeric(substr(x, 4, 4))
read.csv(x, header = FALSE,stringsAsFactors = FALSE, col.names = c('Name', 'Sex', 'Number'))
})
file1 <- list.files(path = './names/names', pattern = '*.txt', full.names = FALSE)
file2 <- lapply(file1, function(x){
year <- as.numeric(substr(x, 4, 7))
read.csv(x, header = FALSE,stringsAsFactors = FALSE, col.names = c('Name', 'Sex', 'Number'))
})
file1 <- list.files(path = './names/names', pattern = '*.txt', full.names = FALSE)
file2 <- lapply(file1, function(x){
year <- as.numeric(substr(x, 4, 8))
read.csv(x, header = FALSE,stringsAsFactors = FALSE, col.names = c('Name', 'Sex', 'Number'))
})
file2
file1 <- list.files(path = './names/names', pattern = '*.txt', full.names = FALSE)
file2 <- lapply(file1, function(x){
as.numeric(substr(x, 4, 7))
#read.csv(x, header = FALSE,stringsAsFactors = FALSE, col.names = c('Name', 'Sex', 'Number'))
})
file2
file1 <- list.files(path = './names/names', pattern = '*.txt', full.names = FALSE)
file2 <- lapply(file1, function(x){
year <- as.numeric(substr(x, 4, 7))
temp <- read.csv(x, header = FALSE,stringsAsFactors = FALSE, col.names = c('Name', 'Sex', 'Number'))
temp$year <- year
})
head(file2)
file1 <- list.files(path = './names/names', pattern = '*.txt', full.names = FALSE)
file2 <- lapply(file1, function(x){
year <- as.numeric(substr(x, 4, 7))
temp <- read.csv(x, header = FALSE,stringsAsFactors = FALSE, col.names = c('Name', 'Sex', 'Number'))
temp$year <- year
return(temp)
})
head(file2)
shiny::runApp('NYCDSA/Data_Analysis_With_R/shinyProject')
library(DT)
library(shiny)
library(googleVis)
runApp('NYCDSA/Data_Analysis_With_R/shinyProject')
runApp('NYCDSA/Data_Analysis_With_R/shinyProject')
runApp('NYCDSA/Data_Analysis_With_R/shinyProject')
runApp('NYCDSA/Data_Analysis_With_R/shinyProject')
runApp('NYCDSA/Data_Analysis_With_R/shinyProject')
runApp('NYCDSA/Data_Analysis_With_R/shinyProject')
runApp('NYCDSA/Data_Analysis_With_R/shinyProject')
runApp('NYCDSA/Data_Analysis_With_R/shinyProject')
runApp('NYCDSA/Data_Analysis_With_R/shiny/shinyApps/shinyApps/shinyDashBoard')
runApp('~/NYCDSA/Data_Analysis_With_R/shinyProject')
plot(gvisGeoChart(selectedData(), locationvar = "Country", colorvar = "vax_rate",
options=list(region="world", displayMode="regions",
resolution="countries", colorAxis = "{colors : ['red', 'green']}",
backgroundColor="lightblue",
keepAspectRatio = TRUE,
width="auto", height="auto")))
runApp('NYCDSA/Data_Analysis_With_R/shinyProject')
runApp('NYCDSA/Data_Analysis_With_R/shinyProject')
renderGvis({
selectedData <- reactive({
req(input$selectedVax)
req(input$selectedYear)
all_vax %>% filter(., vax == input$selectedVax & year == input$selectedYear)
})
gvisGeoChart(selectedData(), locationvar = "Country", colorvar = "vax_rate",
options=list(region="world", displayMode="regions",
resolution="countries", colorAxis = "{colors : ['red', 'green']}",
backgroundColor="lightblue",
keepAspectRatio = TRUE,
width="auto", height="auto"))
})
runApp('NYCDSA/Data_Analysis_With_R/shinyProject')
all_vax %>% filter(., vax == "BCG" & year == 2015) %>%
arrange(., desc(vax_rate)) %>% head(., 50)
runApp('NYCDSA/Data_Analysis_With_R/shinyProject')
runApp('NYCDSA/Data_Analysis_With_R/shinyProject')
library(googleVis)
runApp('NYCDSA/Data_Analysis_With_R/shinyProject')
runApp('NYCDSA/Data_Analysis_With_R/shiny/shinyApps/shinyApps/shinyDashBoard')
library(DT)
library(shiny)
library(shinydashboard)
getwd()
setwd("~/NYCDSA/Data_Analysis_With_R/shinyProject")
library(tidyverse)
library(ggplot2)
library(googleVis)
runApp()
getwd()
getwd()
vax_names <- list.files(path = './immunization_coverage', pattern = '*.csv', full.names = FALSE)
vax_filepaths <- paste0('./immunization_coverage/', vax_names)
all_vax <- lapply(vax_filepaths, function(x){
read.csv(x, header = TRUE, stringsAsFactors = FALSE,
check.names = FALSE)
})
# Name each data frame according to vaccination
names(all_vax) <- str_replace_all(vax_names, ".csv", "")
for(i in 1:length(all_vax)){
all_vax[[i]]$vax <- names(all_vax)[i]
}
all_vax <- bind_rows(all_vax) # bind list of data frames into one data frame
names(all_vax) <-str_replace_all(names(all_vax), "^\\s|\\s$", "") # remove leading spaces
all_vax <- all_vax %>% gather(., key = "year",  value = "vax_rate", "2018":"1980", na.rm = FALSE)
all_vax$year <- as.numeric(all_vax$year)
#Change some country names
all_vax$Country <- gsub("Democratic People's Republic of Korea", "North Korea", all_vax$Country)
all_vax$Country <- gsub("Republic of Korea", "South Korea", all_vax$Country)
all_vax$Country <- gsub("United Kingdom of Great Britain and Northern Ireland", "United Kingdom", all_vax$Country)
all_vax$Country <- gsub("United States of America", "United States", all_vax$Country)
library(DT)
library(shiny)
library(shinydashboard)
library(DT)
library(shiny)
library(googleVis)
runApp()
runApp()
test<- all_vax %>% filter(., vax == input$selectedVax & year == input$selectedYear) %>%
arrange(., desc(vax_rate)) %>% head(., 50)
test<- all_vax %>% filter(., vax == "BCG" & year == 2018) %>%
arrange(., desc(vax_rate)) %>% head(., 50)
plot(gvisBarChart(test, xvar = "Country", yvar = "vax_rate")
)
test<- all_vax %>% filter(., vax == "BCG" & year == 2018) %>%
arrange(., desc(vax_rate)) %>% head(., 10)
plot(gvisBarChart(test, xvar = "Country", yvar = "vax_rate")
)
test<- all_vax %>% filter(., vax == "BCG" & year == 2018) %>%
arrange(., desc(vax_rate)) %>% head(., 10, 20)
plot(gvisBarChart(test, xvar = "Country", yvar = "vax_rate")
)
test<- all_vax %>% filter(., vax == "BCG" & year == 2018) %>%
arrange(., vax_rate) %>% head(., 10)
plot(gvisBarChart(test, xvar = "Country", yvar = "vax_rate")
)
runApp()
runApp()
runApp()
runApp()
runApp()
test2 <- all_vax %>% filter(., vax == "BCG" & year == 2018)
plot(gvisGeoChart(test2, locationvar = "Country", colorvar = "vax_rate",
options=list(region="world", displayMode="regions",
resolution="countries", colorAxis = "{colors : ['red', 'green']}",
backgroundColor="lightblue",
keepAspectRatio = TRUE,
width="auto", height="auto")))
